import asyncio
import re
from aiogram import Router, F
from aiogram.dispatcher import router
from aiogram.filters import CommandStart
from aiogram.types import InputMediaPhoto
from aiogram.utils.chat_action import ChatActionSender
from create_bot import bot
from keyboards.keyboard_all import *
from request_twitch_api.api_request import *
from requests.exceptions import ConnectionError
from db_handler.db_class import *
from functools import wraps
from wraps import *
from config import languages_flags
from db_handler.db_class import UserDatabase

start_router = Router()
user_nickname = {}
user_messages = {}
user_action = {}


@start_router.message(CommandStart())
@start_router.callback_query(F.data == "back_to_start")
@user_permission_required
async def cmd_start(event: Message | CallbackQuery):
    message = None
    if isinstance(event, CallbackQuery):
        await event.answer()
        message = event.message
    elif isinstance(event, Message):
        message = event
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        keyboard_button_random_followers(),
        keyboard_button_check_streamers(),
        keyboard_button_notif_stream()
    ])
    text_command = ('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n'
                    '–ù–∏–∂–µ –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞!')
    if isinstance(event, Message):
        await message.answer(text_command, reply_markup=keyboard)
    else:
        await message.edit_text(text_command, reply_markup=keyboard)


@start_router.callback_query(F.data == "request_permission")
@user_permission_required
async def handle_request_permission(event: CallbackQuery):
    await event.answer()
    db_user = UserDatabase(db_name="db_handler/tg_auth.db")
    user_id = event.from_user.id
    user_login = event.from_user.username
    check_add = db_user.add_record(user_id, user_login, "request_permission")
    if check_add is False:
        await event.message.edit_text("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n"
                                      "–ñ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n"
                                      "–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 24—á‚è≥")
    else:
        await event.message.edit_text("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n"
                                      "–ñ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n"
                                      "–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 24—á‚è≥")
    db_user.close()


@start_router.callback_query(F.data == "write_nickname")
@user_permission_required
async def handle_wait_write_nickname(event: CallbackQuery):
    await event.answer()
    await event.message.edit_text("–ñ–¥—É –Ω–∏–∫-–Ω–µ–π–º –Ω–∞ —Ç–≤–∏—á–µ ‚è≥")
    user_nickname[event.from_user.id] = True


@start_router.callback_query(F.data == "add_notif_stream")
@user_permission_required
async def handle_wait_write_nickname(event: CallbackQuery):
    await event.answer()
    user_action[event.from_user.id] = 'add_notif_stream'
    await event.message.edit_text("–ñ–¥—É –Ω–∏–∫-–Ω–µ–π–º —Å—Ç—Ä–∏–º–µ—Ä–∞ –Ω–∞ —Ç–≤–∏—á–µ ‚è≥")
    user_nickname[event.from_user.id] = True


@start_router.callback_query(F.data == "delete_notif_stream")
@user_permission_required
async def handle_wait_write_nickname(event: CallbackQuery):
    await event.answer()
    user_action[event.from_user.id] = 'delete_notif_stream'
    await event.message.edit_text("–ñ–¥—É –Ω–∏–∫-–Ω–µ–π–º —Å—Ç—Ä–∏–º–µ—Ä–∞ –Ω–∞ —Ç–≤–∏—á–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚è≥")
    user_nickname[event.from_user.id] = True


@start_router.callback_query(F.data.startswith('streamer_'))
@user_permission_required
async def handle_streamer_click(event: CallbackQuery):
    await event.answer()
    match = re.match(r'^streamer_(.+?)_(üî¥|‚ö´Ô∏è)$', event.data)
    print(match)
    if not match:
        await event.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    streamer_name = match.group(1)
    life_status = match.group(2)
    streamers = get_info_stream(streamer_name)[0]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[keyboard_button_open_channel(streamer_name),
                                                     keyboards_button_bac_to_streamers()])
    if not streamers['data']:
        await event.message.edit_text(f'–°—Ç—Ä–∏–º–µ—Ä {streamer_name} –æ—Ñ–ª–∞–π–Ω, –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–ª—é –æ–ø–∏—Å–∞–Ω–∏–µ –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏.', reply_markup=keyboard)
    else:
        info_streamer = streamers['data'][0]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[keyboard_button_open_channel(streamer_name),
                                                         keyboards_button_bac_to_streamers()])
        await event.message.delete()
        lang_tag = info_streamer['language']
        flag = languages_flags.get(lang_tag, '')
        text = (f"{life_status} <b>{streamer_name}</b>\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ —Å—Ç—Ä–∏–º–µ—Ä–∞:\n"
                f"\n"
                f"{f'üëÅ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑—Ä–∏—Ç–µ–ª–µ–π: {info_streamer['viewer_count']}\n\n</b>' if life_status == 'üî¥' else ''}"
                f"üëÖ <b>–Ø–∑—ã–∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏: {flag}\n"
                f"\n"
                f"üéÆ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {'—Ç–µ–∫—É—â–µ–π' if life_status == 'üî¥' else '–ø—Ä–æ—à–ª–æ–π'} —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏: {info_streamer['game_name']}\n"
                f"\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ {'—Ç–µ–∫—É—â–µ–π' if life_status == 'üî¥' else '–ø—Ä–æ—à–ª–æ–π'} —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏: {info_streamer['title']}\n"
                f"\n"
                f"‚ÅâÔ∏è –¢–µ–≥–∏ {'—Ç–µ–∫—É—â–µ–π' if life_status == 'üî¥' else '–ø—Ä–æ—à–ª–æ–π'} —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏: {'‚ûï'.join(info_streamer['tags'])}\n"
                f"\n"
                f"‚ö†Ô∏è –°—Ç—Ä–∏–º {'c –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º' if info_streamer['is_mature'] is False else '–±–µ–∑ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è'}!</b>")

        await bot.send_photo(
            chat_id=event.message.chat.id,
            photo=get_user_pf(streamer_name),
            reply_markup=keyboard,
            caption=text,
            parse_mode='HTML'
        )


@start_router.callback_query(F.data == "back_to_streamers")
@user_permission_required
async def handle_back_to_streamers(event: CallbackQuery):
    user_id = event.from_user.id
    if user_id in user_nickname:
        nickname = user_nickname[user_id]
        followed_streamers = get_followed(nickname)
        if followed_streamers:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                                                keyboard_button_list_streamers(status, name)
                                                                for name, status in followed_streamers.items()
                                                            ] + [keyboards_button_bac_to_start()])

            if event.message.content_type == 'text':
                await event.message.edit_text("–í–æ—Ç —Ç–≤–æ–∏ —Å—Ç—Ä–∏–º–µ—Ä—ã:", reply_markup=keyboard)
            else:
                await event.message.delete()
                await event.message.answer("–í–æ—Ç —Ç–≤–æ–∏ —Å—Ç—Ä–∏–º–µ—Ä—ã:", reply_markup=keyboard)
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[keyboard_button_re_write_nickname()],
                                                             [keyboards_button_bac_to_start()]])
            if event.message.content_type == 'text':
                await event.message.edit_text("–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –ø—É—Å—Ç.", reply_markup=keyboard)
            else:
                await event.message.delete()
                await event.message.answer("–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –ø—É—Å—Ç.", reply_markup=keyboard)
    else:
        keyboards = InlineKeyboardMarkup(inline_keyboard=[
            keyboards_button_bac_to_start()
        ])
        if event.message.content_type == 'text':
            await event.message.edit_text("–ù–∏–∫–Ω–µ–π–º –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=keyboards)
        else:
            await event.message.delete()
            await event.message.answer("–ù–∏–∫–Ω–µ–π–º –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=keyboards)


@start_router.callback_query(F.data == "check_streamers")
@user_permission_required
async def handle_write_nickname(event: CallbackQuery):
    await event.answer()
    user_action[event.from_user.id] = 'check_streamers'
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        keyboard_button_write_nickname(),
        keyboards_button_bac_to_start()
    ])
    sent_message = await event.message.edit_text('–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫-–Ω–µ–π–º –Ω–∞ —Ç–≤–∏—á–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤!',
                                                 reply_markup=keyboard)
    user_messages[event.message.from_user.id] = sent_message.message_id


@start_router.callback_query(F.data == "random_user")
@user_permission_required
async def handle_random_followers(event: CallbackQuery):
    await event.answer()
    user_action[event.from_user.id] = 'random_user'
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        keyboard_button_write_nickname(),
        keyboards_button_bac_to_start()
    ])
    sent_message = await event.message.edit_text('–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫-–Ω–µ–π–º –Ω–∞ —Ç–≤–∏—á–µ, —á—Ç–æ–±—ã –±–æ—Ç –≤—ã–±—Ä–∞–ª '
                                                 '–æ–¥–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–∑ —Ç–≤–æ–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!',
                                                 reply_markup=keyboard)
    user_messages[event.message.from_user.id] = sent_message.message_id


@start_router.callback_query(F.data == "notif_stream")
@user_permission_required
async def handle_request_permission(event: CallbackQuery):
    await event.answer()
    db_user = UserDatabase(db_name="db_handler/tg_auth.db")
    id_user = event.from_user.id
    my_streamers = db_user.get_name_streamers(id_user=id_user)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[keyboard_button_add_notif(),
                                                     keyboards_button_bac_to_start()])
    if not my_streamers:
        sent_message = await event.message.edit_text(f'üîî\n'
                                                     f'<b>–¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ —Å—Ç—Ä–∏–º–µ—Ä–∞(–æ–≤):</b>\n\n'
                                                     f'<b>‚û°Ô∏è –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –ø—É—Å—Ç!\n –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å '
                                                     f'—Å—Ç—Ä–∏–º–µ—Ä–∞", —á—Ç–æ –±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –µ–≥–æ '
                                                     f'—Ç—Ä–∞–Ω—Å—è–ª—Ü–∏–∏.</b>', reply_markup=keyboard,
                                                     parse_mode="HTML")
        user_messages[event.message.from_user.id] = sent_message.message_id
        db_user.close()
    else:
        my_streamers = [streamer[0] for streamer in my_streamers]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[keyboard_button_add_notif(),
                                                         keyboard_button_delete_notif(),
                                                         keyboards_button_bac_to_start()])
        sent_message = await event.message.edit_text(f'üîî\n'
                                      f'<b>–¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ —Å—Ç—Ä–∏–º–µ—Ä–∞(–æ–≤):</b>\n\n'
                                      f'<b>‚û°Ô∏è {"\n‚û°Ô∏è ".join(my_streamers)}</b>', reply_markup=keyboard, parse_mode="HTML")
        user_messages[event.message.from_user.id] = sent_message.message_id
        db_user.close()


@start_router.message()
@user_permission_required
async def handle_message(event: Message):
    user_id = event.from_user.id
    if user_id in user_nickname and user_nickname[user_id] is True:
        nickname = event.text
        user_nickname[user_id] = nickname
        action = user_action.get(user_id)
        if action == 'check_streamers':
            try:
                followed_streamers = get_followed(nickname)
            except ConnectionError:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[keyboards_button_bac_to_start()]])
                return await event.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω.\n"
                                          "–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏ –ø–æ–∫–∞ –≤—Å–µ –æ–∂–∏–≤–µ—Ç ;)",
                                          reply_markup=keyboard)
            if followed_streamers:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                                                    keyboard_button_list_streamers(status, name)
                                                                    for name, status in followed_streamers.items()
                                                                ] + [keyboards_button_bac_to_start()])

                async with ChatActionSender(bot=bot, chat_id=user_id, action="typing"):
                    await event.answer("–í–æ—Ç —Ç–≤–æ–∏ —Å—Ç—Ä–∏–º–µ—Ä—ã:", reply_markup=keyboard)
            else:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    keyboard_button_re_write_nickname(),
                    keyboards_button_bac_to_start()
                ])
                await event.answer("–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –∏–ª–∏ —Ç—ã –Ω–∞–∫–æ—Å—è—á–∏–ª —Å –Ω–∏–∫-–Ω–µ–π–º–æ–º!",
                                   reply_markup=keyboard)
        elif action == 'random_user':
            try:
                followed_streamers = get_random_follower('myrzen_u')
            except ConnectionError:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[keyboards_button_bac_to_start()]])
                return await event.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω.\n"
                                          "–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏ –ø–æ–∫–∞ –≤—Å–µ –æ–∂–∏–≤–µ—Ç ;)",
                                          reply_markup=keyboard)
            if followed_streamers:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[keyboard_button_re_roll_follow(),
                                                                 keyboards_button_bac_to_start()])
                async with ChatActionSender(bot=bot, chat_id=user_id, action="typing"):
                    await event.answer(f"–í–æ—Ç —Ç–≤–æ–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: {followed_streamers}", reply_markup=keyboard)
            else:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    keyboard_button_re_write_nickname(),
                    keyboards_button_bac_to_start(),
                ])
                await event.answer("–ü–æ—Ö–æ–∂–µ, —É —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–ª–∏ —Ç—ã –Ω–∞–∫–æ—Å—è—á–∏–ª —Å –Ω–∏–∫-–Ω–µ–π–º–æ–º!",
                                   reply_markup=keyboard)
        elif action == 'add_notif_stream':
            id_user = event.from_user.id
            name_streamer = event.text
            info = get_info_stream(name_streamer)
            if info[1] == 400:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[keyboard_button_re_write_notif(),
                                                                 keyboards_button_bac_to_start()])
                await event.answer(f"–ü–æ—Ö–æ–∂–µ, —Ç–∞–∫–æ–≥–æ —Å—Ç—Ä–∏–º–µ—Ä–∞ –Ω–µ—Ç—É –∏–ª–∏ —Ç—ã –Ω–∞–∫–æ—Å—è—á–∏–ª —Å –Ω–∏–∫-–Ω–µ–π–º–æ–º!", reply_markup=keyboard)
            else:
                db_user = UserDatabase(db_name="db_handler/tg_auth.db")
                keyboard = InlineKeyboardMarkup(inline_keyboard=[keyboard_button_bac_to_notif_stream(),
                                                                 keyboards_button_bac_to_start()])
                add_user = db_user.add_user_for_notif(id_user, name_streamer)
                if add_user:
                    await event.answer(f"–°—Ç—Ä–∏–º–µ—Ä {name_streamer} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!", reply_markup=keyboard)
                    db_user.close()
                else:
                    if add_user is False:
                        await event.answer(f"–ü–æ—Ö–æ–∂–µ —Ç—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª —Å—Ç—Ä–∏–º–µ—Ä–∞ {name_streamer} –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.", reply_markup=keyboard)
                    else:
                        await event.answer(f"–ó–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à–µ–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=keyboard)
                    db_user.close()
        elif action == 'delete_notif_stream':
            id_user = event.from_user.id
            name_streamer = event.text
            db_user = UserDatabase(db_name="db_handler/tg_auth.db")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[keyboard_button_bac_to_notif_stream(),
                                                             keyboards_button_bac_to_start()])
            if db_user.delete_streamer(name_streamer, id_user):
                keyboard = InlineKeyboardMarkup(inline_keyboard=[keyboard_button_bac_to_notif_stream(),
                                                                 keyboards_button_bac_to_start()])
                await event.answer(f"–°—Ç—Ä–∏–º–µ—Ä {name_streamer} —É–¥–∞–ª–µ–Ω –∏–∑ —Ç–≤–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!",
                                   reply_markup=keyboard)
            else:
                await event.answer(f"–ü–æ—Ö–æ–∂–µ —Ç—ã –æ—à–∏–±—Å—è —Å –Ω–∏–∫-–Ω–µ–π–º–æ–º –∏–ª–∏ —ç—Ç–æ–≥–æ —Å—Ç—Ä–º–∏–µ—Ä–∞ –Ω–µ—Ç –≤ —Ç–≤–æ–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö.",
                                   reply_markup=keyboard)

@start_router.callback_query(F.data == "re_roll_follow")
@user_permission_required
async def handle_re_roll_follow(event: CallbackQuery):
    await event.answer()
    try:
        new_follower = get_random_follower('myrzen_u')
    except ConnectionError:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[keyboards_button_bac_to_start()]])
        return await event.message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω.\n"
                                          "–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏ –ø–æ–∫–∞ –≤—Å–µ –æ–∂–∏–≤–µ—Ç ;)",
                                          reply_markup=keyboard)
    if new_follower:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[keyboard_button_re_roll_follow(),
                                                         keyboards_button_bac_to_start()])
        await event.message.edit_text(f"–í–æ—Ç –Ω–æ–≤—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: {new_follower}", reply_markup=keyboard)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            keyboard_button_re_write_nickname(),
            keyboards_button_bac_to_start(),
        ])
        await event.message.edit_text("–ü–æ—Ö–æ–∂–µ, —É —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–ª–∏ —Ç—ã –Ω–∞–∫–æ—Å—è—á–∏–ª —Å –Ω–∏–∫-–Ω–µ–π–º–æ–º!",
                                      reply_markup=keyboard)
